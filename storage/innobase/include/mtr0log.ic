/*****************************************************************************

Copyright (c) 1995, 2016, Oracle and/or its affiliates. All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Suite 500, Boston, MA 02110-1335 USA

*****************************************************************************/

/**************************************************//**
@file include/mtr0log.ic
Mini-transaction logging routines

Created 12/7/1995 Heikki Tuuri
*******************************************************/

#include "buf0dblwr.h"
#include "fsp0types.h"
#include "mach0data.h"
#include "trx0types.h"

///////////////////////////////////////////////////////////

/*Opens a buffer*/
#if defined (UNIV_PMEMOBJ_PART_PL)
/*
If cur_off + size > limit size then call realloc to extend the buffer
*/
UNIV_INLINE
byte*
mlog_open(
	mtr_t*	mtr,
	ulint	size)
{
	mtr->set_modified();

	if (mtr_get_log_mode(mtr) == MTR_LOG_NONE
	    || mtr_get_log_mode(mtr) == MTR_LOG_NO_REDO) {

		return(NULL);
	}
	
	return (mtr->open_buf(size));
}

/*Closes a buffer
Set the cur_off to the ptr
The ptr must greater than the cur_off (only move forward)
*/
UNIV_INLINE
void
mlog_close(
	mtr_t*	mtr,	/*!< in: mtr */
	byte*	ptr)	/*!< in: buffer space from ptr up was not used */
{
	ut_ad(mtr_get_log_mode(mtr) != MTR_LOG_NONE);
	ut_ad(mtr_get_log_mode(mtr) != MTR_LOG_NO_REDO);
	
	//update offset
	byte* begin_ptr = mtr->get_buf();

	uint32_t new_off = ptr - begin_ptr;
	
	ut_ad(new_off < mtr->get_max_buf_size());
	
	//we only increase the offset in mlog_close()
	ut_ad(mtr->get_cur_off() <= new_off);

	mtr->set_cur_off(new_off);
}

/*Catenates 1 - 4 bytes to the mtr log. The value is not compressed. */
UNIV_INLINE
void
mlog_catenate_ulint(
/*================*/
	mtr_buf_t*	mtr_buf,	/*!< in/out: buffer to write */
	ulint		val,		/*!< in: value to write */
	mlog_id_t	type)		/*!< in: type of value to write */
{
	//we don't use this function
	assert(0);
}

/* PPL FUNCTION
Catenates 1 - 4 bytes to the mtr log. The value is not compressed.
This function use push instead of open_log and close_log 
*/
UNIV_INLINE
void
mlog_catenate_ulint(
	mtr_t*	mtr,	/*!< in/out: mtr */
	ulint		val,		/*!< in: value to write */
	mlog_id_t	type)		/*!< in: type of value to write */
{
	ut_ad(MLOG_1BYTE == 1);
	ut_ad(MLOG_2BYTES == 2);
	ut_ad(MLOG_4BYTES == 4);
	ut_ad(MLOG_8BYTES == 8);

	if (mtr_get_log_mode(mtr) == MTR_LOG_NONE
	    || mtr_get_log_mode(mtr) == MTR_LOG_NO_REDO) {

		return;
	}

	//byte*	ptr = mtr_buf->push<byte*>(type);
	
	//check full as in open
	uint32_t size = type;

    byte* ptr = mtr->open_buf(size);

	uint32_t cur_off = mtr->get_cur_off();
	
	switch (type) {
	case MLOG_4BYTES:
		mach_write_to_4(ptr, val);
		break;
	case MLOG_2BYTES:
		mach_write_to_2(ptr, val);
		break;
	case MLOG_1BYTE:
		mach_write_to_1(ptr, val);
		break;
	default:
		ut_error;
	}

	//increase the offset equal to number of written bytes	
	mtr->set_cur_off(cur_off + size);	
}

/** Writes a log record about an operation.
@param[in]	type		redo log record type
@param[in]	space_id	tablespace identifier
@param[in]	page_no		page number
@param[in,out]	log_ptr		current end of mini-transaction log
@param[in,out]	mtr		mini-transaction
@return	end of mini-transaction log */
UNIV_INLINE
byte*
mlog_write_initial_log_record_low(
	mlog_id_t	type,
	ulint		space_id,
	ulint		page_no,
	byte*		log_ptr,
	mtr_t*		mtr)
{
	ut_ad(type <= MLOG_BIGGEST_TYPE);
	ut_ad(type == MLOG_FILE_NAME
	      || type == MLOG_FILE_DELETE
	      || type == MLOG_FILE_CREATE2
	      || type == MLOG_FILE_RENAME2
	      || type == MLOG_INDEX_LOAD
	      || type == MLOG_TRUNCATE
	      || mtr->is_named_space(space_id));

	
	byte*		begin_log_ptr;
	uint16_t	off0;	
	uint16_t	off1;	
	uint64_t	key;	
	uint64_t	lsn;

	ib_uint32_t n_recs;
	uint32_t rec_size;
	
	n_recs = mtr->get_n_recs();

	begin_log_ptr = mtr->get_buf();
	assert(log_ptr >= begin_log_ptr);
	
	//save current off	
	off0 = (log_ptr - begin_log_ptr);
	mtr->add_off(off0);
	
	//compute size for previous log rec	

	if (n_recs > 0){
		uint16_t prev_off = mtr->get_off_at(n_recs - 1); 
		uint16_t prev_len_off = mtr->get_len_off_at(n_recs - 1); 

		assert(off0 > prev_off);

		rec_size = off0 - prev_off ;
		if (rec_size > UINT16_MAX){
			printf("PMEM_ERROR: rec_size %zu is larger than UINT16MAX %zu\n", rec_size, UINT16_MAX);
			assert(0);
		}

		mach_write_to_2(begin_log_ptr + prev_len_off, rec_size);
		mtr->add_size_at(rec_size, n_recs - 1);
	}
	else {
		//this is the first log rec in the mtr, do nothing
	}

	//write type, space, page as original code
	mach_write_to_1(log_ptr, type);
	log_ptr++;

	log_ptr += mach_write_compressed(log_ptr, space_id);
	log_ptr += mach_write_compressed(log_ptr, page_no);

	//save offset of "rec_len" field
	off1 = (log_ptr - begin_log_ptr);
	mtr->add_len_off(off1);

	/*reserve 2-byte for rec len, we write it later in the next call of this
	function or at mtr::execute for the last log rec */
	log_ptr += 2;
	
	/*reserve 8-byte for LSN, we write it later when log recs are written to PPL partition log buffer */
	//lsn = ut_time_us(NULL);
	//mach_write_to_8(log_ptr, lsn);
	log_ptr += 8;

	//add info 

	//We compute the key as InnoDB 
	key = (space_id << 20) + space_id + page_no;
	mtr->add_key(key);
	//mtr->add_LSN(lsn);
	mtr->add_type(type);
	mtr->add_space(space_id);
	mtr->add_page(page_no);

	mtr->added_rec();
	return(log_ptr);
}

#else //////////      original ///////////////////////////////////////

/* Opens a buffer to mlog. It must be closed with mlog_close.
@return buffer, NULL if log mode MTR_LOG_NONE or MTR_LOG_NO_REDO */
UNIV_INLINE
byte*
mlog_open(
/*======*/
	mtr_t*	mtr,	/*!< in: mtr */
	ulint	size)	/*!< in: buffer size in bytes; MUST be
			smaller than mtr_t::buf_t::MAX_DATA_SIZE! */
{
	mtr->set_modified();

	if (mtr_get_log_mode(mtr) == MTR_LOG_NONE
	    || mtr_get_log_mode(mtr) == MTR_LOG_NO_REDO) {

		return(NULL);
	}
	return(mtr->get_log()->open(size));
}

/********************************************************//**
Closes a buffer opened to mlog. */
UNIV_INLINE
void
mlog_close(
/*=======*/
	mtr_t*	mtr,	/*!< in: mtr */
	byte*	ptr)	/*!< in: buffer space from ptr up was not used */
{
	ut_ad(mtr_get_log_mode(mtr) != MTR_LOG_NONE);
	ut_ad(mtr_get_log_mode(mtr) != MTR_LOG_NO_REDO);

	mtr->get_log()->close(ptr);
}

#ifndef UNIV_HOTBACKUP
/********************************************************//**
Catenates 1 - 4 bytes to the mtr log. The value is not compressed. */
UNIV_INLINE
void
mlog_catenate_ulint(
/*================*/
	mtr_buf_t*	mtr_buf,	/*!< in/out: buffer to write */
	ulint		val,		/*!< in: value to write */
	mlog_id_t	type)		/*!< in: type of value to write */
{
	ut_ad(MLOG_1BYTE == 1);
	ut_ad(MLOG_2BYTES == 2);
	ut_ad(MLOG_4BYTES == 4);
	ut_ad(MLOG_8BYTES == 8);

	byte*	ptr = mtr_buf->push<byte*>(type);

	switch (type) {
	case MLOG_4BYTES:
		mach_write_to_4(ptr, val);
		break;
	case MLOG_2BYTES:
		mach_write_to_2(ptr, val);
		break;
	case MLOG_1BYTE:
		mach_write_to_1(ptr, val);
		break;
	default:
		ut_error;
	}
}

/** Writes a log record about an operation.
@param[in]	type		redo log record type
@param[in]	space_id	tablespace identifier
@param[in]	page_no		page number
@param[in,out]	log_ptr		current end of mini-transaction log
@param[in,out]	mtr		mini-transaction
@return	end of mini-transaction log */
UNIV_INLINE
byte*
mlog_write_initial_log_record_low(
	mlog_id_t	type,
	ulint		space_id,
	ulint		page_no,
	byte*		log_ptr,
	mtr_t*		mtr)
{
	ut_ad(type <= MLOG_BIGGEST_TYPE);
	ut_ad(type == MLOG_FILE_NAME
	      || type == MLOG_FILE_DELETE
	      || type == MLOG_FILE_CREATE2
	      || type == MLOG_FILE_RENAME2
	      || type == MLOG_INDEX_LOAD
	      || type == MLOG_TRUNCATE
	      || mtr->is_named_space(space_id));


	mach_write_to_1(log_ptr, type);
	log_ptr++;

	log_ptr += mach_write_compressed(log_ptr, space_id);
	log_ptr += mach_write_compressed(log_ptr, page_no);

	mtr->added_rec();
	return(log_ptr);
}

/********************************************************//**
Catenates 1 - 4 bytes to the mtr log. The value is not compressed. */
UNIV_INLINE
void
mlog_catenate_ulint(
/*================*/
	mtr_t*		mtr,	/*!< in/out: mtr */
	ulint		val,	/*!< in: value to write */
	mlog_id_t	type)	/*!< in: MLOG_1BYTE, MLOG_2BYTES, MLOG_4BYTES */
{
	if (mtr_get_log_mode(mtr) == MTR_LOG_NONE
	    || mtr_get_log_mode(mtr) == MTR_LOG_NO_REDO) {

		return;
	}

	mlog_catenate_ulint(mtr->get_log(), val, type);
}
#endif /* !UNIV_HOTBACKUP */

#endif //UNIV_PMEMOBJ_PART_PL

/////////////////////////////////////////////////////////////
////////////////////////////// We reused below functions /////////////////
////////////////////////////////////////////////////////////////
#ifndef UNIV_HOTBACKUP

/********************************************************//**
Catenates a compressed ulint to mlog. */
UNIV_INLINE
void
mlog_catenate_ulint_compressed(
/*===========================*/
	mtr_t*	mtr,	/*!< in: mtr */
	ulint	val)	/*!< in: value to write */
{
	byte*	log_ptr;

	log_ptr = mlog_open(mtr, 10);

	/* If no logging is requested, we may return now */
	if (log_ptr == NULL) {

		return;
	}

	log_ptr += mach_write_compressed(log_ptr, val);

	mlog_close(mtr, log_ptr);
}

/********************************************************//**
Catenates a compressed 64-bit integer to mlog. */
UNIV_INLINE
void
mlog_catenate_ull_compressed(
/*=========================*/
	mtr_t*		mtr,	/*!< in: mtr */
	ib_uint64_t	val)	/*!< in: value to write */
{
	byte*	log_ptr;

	log_ptr = mlog_open(mtr, 15);

	/* If no logging is requested, we may return now */
	if (log_ptr == NULL) {

		return;
	}

	log_ptr += mach_u64_write_compressed(log_ptr, val);

	mlog_close(mtr, log_ptr);
}


/********************************************************//**
Writes the initial part of a log record (3..11 bytes).
If the implementation of this function is changed, all
size parameters to mlog_open() should be adjusted accordingly!
@return new value of log_ptr */
UNIV_INLINE
byte*
mlog_write_initial_log_record_fast(
/*===============================*/
	const byte*	ptr,	/*!< in: pointer to (inside) a buffer
				frame holding the file page where
				modification is made */
	mlog_id_t	type,	/*!< in: log item type: MLOG_1BYTE, ... */
	byte*		log_ptr,/*!< in: pointer to mtr log which has
				been opened */
	mtr_t*		mtr)	/*!< in/out: mtr */
{
	const byte*	page;
	ulint		space;
	ulint		offset;

	ut_ad(log_ptr);
	ut_d(mtr->memo_modify_page(ptr));

	page = (const byte*) ut_align_down(ptr, UNIV_PAGE_SIZE);
	space = mach_read_from_4(page + FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID);
	offset = mach_read_from_4(page + FIL_PAGE_OFFSET);

	/* check whether the page is in the doublewrite buffer;
	the doublewrite buffer is located in pages
	FSP_EXTENT_SIZE, ..., 3 * FSP_EXTENT_SIZE - 1 in the
	system tablespace */

	if (space == TRX_SYS_SPACE
	    && offset >= FSP_EXTENT_SIZE && offset < 3 * FSP_EXTENT_SIZE) {
		if (buf_dblwr_being_created) {
			/* Do nothing: we only come to this branch in an
			InnoDB database creation. We do not redo log
			anything for the doublewrite buffer pages. */
			return(log_ptr);
		} else {
			ib::error() << "Trying to redo log a record of type "
				<< type << "  on page "
				<< page_id_t(space, offset) << "in the"
				" doublewrite buffer, continuing anyway."
				" Please post a bug report to"
				" bugs.mysql.com.";
			ut_ad(0);
		}
	}

	return(mlog_write_initial_log_record_low(type, space, offset,
						 log_ptr, mtr));
}
#endif /* !UNIV_HOTBACKUP */
